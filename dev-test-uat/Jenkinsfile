pipeline {
    agent any

    triggers {
        pollSCM('H/5 8-16 * * 1-5')
        upstream(upstreamProjects: 'sbms-discovery,sbms-admin,sbms-web,sbms-greeting', threshold: hudson.model.Result.SUCCESS)
    }

    environment {
        DEV_SWARM_MANAGER = '172.24.140.88:2375'
        DEV_STACK_NAME = 'sbms-dev'
        DEV_SOURCE_IMAGE_TAG = 'latest'
        DEV_TARGET_IMAGE_TAG = 'dev'

        TEST_SWARM_MANAGER = '172.24.140.88:2375'
        TEST_STACK_NAME = 'sbms-test'
        TEST_SOURCE_IMAGE_TAG = 'dev'
        TEST_TARGET_IMAGE_TAG = 'test'
        TEST_PASSED_IMAGE_TAG = 'test-passed'

        UAT_SWARM_MANAGER = '172.24.140.88:2375'
        UAT_STACK_NAME = 'sbms-uat'
        UAT_SOURCE_IMAGE_TAG = 'test-passed'
        UAT_TARGET_IMAGE_TAG = 'uat'
    }
    
    stages {
        stage('Prepare Dev Infrastructure') {
            environment {
                IMAGE_TAG = "$DEV_TARGET_IMAGE_TAG"
                MONGO_DATA_PATH = "/opt/sbms/dev/mongo"
                MONGO_PORT = "27000"
                DISCOVERY_PRIMARY_PORT = "18761"
                DISCOVERY_SECONDARY_PORT = "18762"
                EUREKA_INSTANCE_LIST = "http://dev-master-1:18761/eureka/,http://dev-master-1:18762/eureka/"
            }
            steps {
                sh "docker -H $DEV_SWARM_MANAGER stack deploy --compose-file sbms-infrastructure.yml --resolve-image always --prune $DEV_STACK_NAME"
            }
        }
        stage('Deploy to Dev') {
            environment {
                IMAGE_TAG = "$DEV_TARGET_IMAGE_TAG"
                ADMIN_PORT = "19999"
                WEB_PORT = "18080"
                EUREKA_INSTANCE_LIST = "http://dev-master-1:18761/eureka/,http://dev-master-1:18762/eureka/"
                MONGODB_HOST = "dev-master-1"
                MONGODB_PORT = "27000"
            }
            steps {
                withDockerRegistry([url: '', credentialsId: 'DOCKER_HUB_CREDENTIALS']) {
                    sh "docker tag jvandusen/sbms-discovery:$DEV_SOURCE_IMAGE_TAG jvandusen/sbms-discovery:$DEV_TARGET_IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-admin:$DEV_SOURCE_IMAGE_TAG jvandusen/sbms-admin:$DEV_TARGET_IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-web:$DEV_SOURCE_IMAGE_TAG jvandusen/sbms-web:$DEV_TARGET_IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-greeting:$DEV_SOURCE_IMAGE_TAG jvandusen/sbms-greeting:$DEV_TARGET_IMAGE_TAG"
                    
                    sh "docker -H $DEV_SWARM_MANAGER stack deploy --compose-file sbms-application.yml --resolve-image always --prune $DEV_STACK_NAME"
                    
                    sh "docker push jvandusen/sbms-discovery:$DEV_TARGET_IMAGE_TAG"
                    sh "docker push jvandusen/sbms-admin:$DEV_TARGET_IMAGE_TAG"
                    sh "docker push jvandusen/sbms-web:$DEV_TARGET_IMAGE_TAG"
                    sh "docker push jvandusen/sbms-greeting:$DEV_TARGET_IMAGE_TAG"
                }
            }
        }
        stage('Prepare Images for Test') {
            steps {
                withDockerRegistry([url: '', credentialsId: 'DOCKER_HUB_CREDENTIALS']) {
                    sh "docker tag jvandusen/sbms-discovery:$TEST_SOURCE_IMAGE_TAG jvandusen/sbms-discovery:$TEST_TARGET_IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-admin:$TEST_SOURCE_IMAGE_TAG jvandusen/sbms-admin:$TEST_TARGET_IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-web:$TEST_SOURCE_IMAGE_TAG jvandusen/sbms-web:$TEST_TARGET_IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-greeting:$TEST_SOURCE_IMAGE_TAG jvandusen/sbms-greeting:$TEST_TARGET_IMAGE_TAG"

                    sh "docker push jvandusen/sbms-discovery:$TEST_TARGET_IMAGE_TAG"
                    sh "docker push jvandusen/sbms-admin:$TEST_TARGET_IMAGE_TAG"
                    sh "docker push jvandusen/sbms-web:$TEST_TARGET_IMAGE_TAG"
                    sh "docker push jvandusen/sbms-greeting:$TEST_TARGET_IMAGE_TAG"
                }
            }
        }
        stage('Prepare Test Infrastructure') {
            environment {
                IMAGE_TAG = "$TEST_TARGET_IMAGE_TAG"
                MONGO_DATA_PATH = "/opt/sbms/test/mongo"
                MONGO_PORT = "27001"
                DISCOVERY_PRIMARY_PORT = "28761"
                DISCOVERY_SECONDARY_PORT = "28762"
                EUREKA_INSTANCE_LIST = "http://dev-master-1:28761/eureka/,http://dev-master-1:28762/eureka/"
            }
            steps {
                sh "docker -H $TEST_SWARM_MANAGER stack deploy --compose-file sbms-infrastructure.yml --resolve-image always --prune $TEST_STACK_NAME"
            }
        }
        stage('Deploy to Test') {
            environment {
                IMAGE_TAG = "$TEST_TARGET_IMAGE_TAG"
                ADMIN_PORT = "29999"
                WEB_PORT = "28080"
                EUREKA_INSTANCE_LIST = "http://dev-master-1:28761/eureka/,http://dev-master-1:28762/eureka/"
                MONGODB_HOST = "dev-master-1"
                MONGODB_PORT = "27001"
            }
            steps {
                sh "rm -rf $MONGO_DATA_PATH/*"
                withDockerRegistry([url: '', credentialsId: 'DOCKER_HUB_CREDENTIALS']) {
                    sh "docker -H $TEST_SWARM_MANAGER stack deploy --compose-file sbms-application.yml --resolve-image always --prune $TEST_STACK_NAME"
                }
            }
        }
        stage('Run Tests') {
            steps {
                // TODO: execute tests
                echo "insert tests here"
            }
            post {
                always {
                    sh "docker -H $TEST_SWARM_MANAGER stack rm $TEST_STACK_NAME"
                }
            }
        }
        stage ('Tag Tested Images') {
            steps {
                withDockerRegistry([url: '', credentialsId: 'DOCKER_HUB_CREDENTIALS']) {
                    sh "docker tag jvandusen/sbms-discovery:$TEST_TARGET_IMAGE_TAG jvandusen/sbms-discovery:$TEST_PASSED_IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-admin:$TEST_TARGET_IMAGE_TAG jvandusen/sbms-admin:$TEST_PASSED_IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-web:$TEST_TARGET_IMAGE_TAG jvandusen/sbms-web:$TEST_PASSED_IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-greeting:$TEST_TARGET_IMAGE_TAG jvandusen/sbms-greeting:$TEST_PASSED_IMAGE_TAG"

                    sh "docker push jvandusen/sbms-discovery:$TEST_PASSED_IMAGE_TAG"
                    sh "docker push jvandusen/sbms-admin:$TEST_PASSED_IMAGE_TAG"
                    sh "docker push jvandusen/sbms-web:$TEST_PASSED_IMAGE_TAG"
                    sh "docker push jvandusen/sbms-greeting:$TEST_PASSED_IMAGE_TAG"
                }
            }
        }
        stage('Prepare UAT Infrastructure') {
            environment {
                IMAGE_TAG = "$UAT_TARGET_IMAGE_TAG"
                MONGO_DATA_PATH = "/opt/sbms/uat/mongo"
                MONGO_PORT = "27017"
                DISCOVERY_PRIMARY_PORT = "8761"
                DISCOVERY_SECONDARY_PORT = "8762"
                EUREKA_INSTANCE_LIST = "http://dev-master-1:8761/eureka/,http://dev-master-1:8762/eureka/"
            }
            steps {
                sh "docker -H $UAT_SWARM_MANAGER stack deploy --compose-file sbms-infrastructure.yml --resolve-image always --prune $UAT_STACK_NAME"
            }
        }
        stage('Deploy to UAT') {
            environment {
                IMAGE_TAG = "$UAT_TARGET_IMAGE_TAG"
                ADMIN_PORT = "9999"
                WEB_PORT = "8080"
                EUREKA_INSTANCE_LIST = "http://dev-master-1:8761/eureka/,http://dev-master-1:8762/eureka/"
                MONGODB_HOST = "dev-master-1"
                MONGODB_PORT = "27017"
            }
            steps {
                withDockerRegistry([url: '', credentialsId: 'DOCKER_HUB_CREDENTIALS']) {
                    sh "docker tag jvandusen/sbms-discovery:$UAT_SOURCE_IMAGE_TAG jvandusen/sbms-discovery:$UAT_TARGET_IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-admin:$UAT_SOURCE_IMAGE_TAG jvandusen/sbms-admin:$UAT_TARGET_IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-web:$UAT_SOURCE_IMAGE_TAG jvandusen/sbms-web:$UAT_TARGET_IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-greeting:$UAT_SOURCE_IMAGE_TAG jvandusen/sbms-greeting:$UAT_TARGET_IMAGE_TAG"

                    sh "docker -H $UAT_SWARM_MANAGER stack deploy --compose-file sbms-application.yml --resolve-image always --prune $UAT_STACK_NAME"

                    sh "docker push jvandusen/sbms-discovery:$UAT_TARGET_IMAGE_TAG"
                    sh "docker push jvandusen/sbms-admin:$UAT_TARGET_IMAGE_TAG"
                    sh "docker push jvandusen/sbms-web:$UAT_TARGET_IMAGE_TAG"
                    sh "docker push jvandusen/sbms-greeting:$UAT_TARGET_IMAGE_TAG"
                }
            }
        }
    }
}
