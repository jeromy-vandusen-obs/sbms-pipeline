pipeline {
    agent any

    triggers {
        pollSCM('H/5 8-16 * * 1-5')
        upstream(upstreamProjects: 'sbms-discovery,sbms-admin,sbms-web,sbms-greeting', threshold: hudson.model.Result.SUCCESS)
    }

    environment {
        DEV_HOST = "172.24.140.88"
    }
    
    stages {
        stage('Prepare Dev Infrastructure') {
            environment {
                INFRA_MANAGER = "$DEV_HOST:2375"
                COMPOSE_PROJECT_NAME = "sbms-dev-infra"
                IMAGE_TAG = "dev"
                
                MONGODB_DATA_PATH = "/opt/sbms/dev/mongodb"
                MONGODB_PORT = "27000"
                DISCOVERY_PORT = "18761"
                EUREKA_INSTANCE_LIST = "http://sbms-discovery:$DISCOVERY_PORT/eureka/"
                
                NETWORK_HOST = "$INFRA_MANAGER"
                NETWORK_NAME = "sbms-dev-net"
            }
            steps {
                sh "chmod +x ./create-network.sh"
                sh "./create-network.sh"
                sh "docker-compose -H $INFRA_MANAGER -f sbms-infrastructure.yml pull"
                sh "docker-compose -H $INFRA_MANAGER -f sbms-infrastructure.yml up -d"
            }
        }
        stage('Deploy to Dev') {
            environment {
                APP_SWARM_MANAGER = "$DEV_HOST:2375"
                APP_STACK_NAME = "sbms-dev-app"
                SOURCE_IMAGE_TAG = "latest"
                IMAGE_TAG = "dev"
                
                ADMIN_PORT = "19999"
                WEB_PORT = "18080"
                GREETING_PORT = "18100"
                DISCOVERY_PORT = "18761"
                
                EUREKA_INSTANCE_LIST = "http://sbms-discovery:$DISCOVERY_PORT/eureka/"
                MONGODB_HOST = "sbms-mongo"
                MONGODB_PORT = "27000"
                
                NETWORK_NAME = "sbms-dev-net"
            }
            steps {
                withDockerRegistry([url: '', credentialsId: 'DOCKER_HUB_CREDENTIALS']) {
                    sh "docker tag jvandusen/sbms-discovery:$SOURCE_IMAGE_TAG jvandusen/sbms-discovery:$IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-admin:$SOURCE_IMAGE_TAG jvandusen/sbms-admin:$IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-web:$SOURCE_IMAGE_TAG jvandusen/sbms-web:$IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-greeting:$SOURCE_IMAGE_TAG jvandusen/sbms-greeting:$IMAGE_TAG"
                    
                    sh "docker -H $APP_SWARM_MANAGER stack deploy --compose-file sbms-application.yml --resolve-image always --prune $APP_STACK_NAME"
                    
                    sh "docker push jvandusen/sbms-discovery:$IMAGE_TAG"
                    sh "docker push jvandusen/sbms-admin:$IMAGE_TAG"
                    sh "docker push jvandusen/sbms-web:$IMAGE_TAG"
                    sh "docker push jvandusen/sbms-greeting:$IMAGE_TAG"
                }
            }
        }
        stage('Prepare Images for Test') {
            environment {
                SOURCE_IMAGE_TAG = "dev"
                IMAGE_TAG = "test"
            }
            steps {
                withDockerRegistry([url: '', credentialsId: 'DOCKER_HUB_CREDENTIALS']) {
                    sh "docker tag jvandusen/sbms-discovery:$SOURCE_IMAGE_TAG jvandusen/sbms-discovery:$IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-admin:$SOURCE_IMAGE_TAG jvandusen/sbms-admin:$IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-web:$SOURCE_IMAGE_TAG jvandusen/sbms-web:$IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-greeting:$SOURCE_IMAGE_TAG jvandusen/sbms-greeting:$IMAGE_TAG"

                    sh "docker push jvandusen/sbms-discovery:$IMAGE_TAG"
                    sh "docker push jvandusen/sbms-admin:$IMAGE_TAG"
                    sh "docker push jvandusen/sbms-web:$IMAGE_TAG"
                    sh "docker push jvandusen/sbms-greeting:$IMAGE_TAG"
                }
            }
        }
        stage('Prepare Test Infrastructure') {
            environment {
                INFRA_MANAGER = "$DEV_HOST:2375"
                COMPOSE_PROJECT_NAME = "sbms-test-infra"
                IMAGE_TAG = "test"
                
                MONGODB_DATA_PATH = "/opt/sbms/test/mongodb"
                MONGODB_PORT = "27001"
                DISCOVERY_PORT = "28761"
                EUREKA_INSTANCE_LIST = "http://sbms-discovery:$DISCOVERY_PORT/eureka/"
                
                NETWORK_NAME = "sbms-test-net"
                NETWORK_HOST = "$INFRA_MANAGER"
            }
            steps {
                sh "chmod +x ./create-network.sh"
                sh "./create-network.sh"
                sh "docker-compose -H $INFRA_MANAGER -f sbms-infrastructure.yml pull"
                sh "docker-compose -H $INFRA_MANAGER -f sbms-infrastructure.yml up -d"
            }
        }
        stage('Deploy to Test') {
            environment {
                IMAGE_TAG = "test"
                ADMIN_PORT = "29999"
                WEB_PORT = "28080"
                GREETING_PORT = "28100"
                DISCOVERY_PORT = "28761"
                EUREKA_INSTANCE_LIST = "http://sbms-discovery:$DISCOVERY_PORT/eureka/"
                MONGODB_HOST = "sbms-mongo"
                MONGODB_PORT = "27001"
                NETWORK_NAME = "sbms-test-net"
            }
            steps {
                withDockerRegistry([url: '', credentialsId: 'DOCKER_HUB_CREDENTIALS']) {
                    sh "docker -H $APP_SWARM_MANAGER stack deploy --compose-file sbms-application.yml --resolve-image always --prune $APP_STACK_NAME"
                }
            }
        }
        stage('Run Tests') {
            environment {
                INFRA_MANAGER = "$DEV_HOST:2375"
                APP_SWARM_MANAGER = "$DEV_HOST:2375"
                APP_STACK_NAME = "sbms-test-app"
                
                COMPOSE_PROJECT_NAME = "sbms-test-infra"
                IMAGE_TAG = "test"
                
                MONGODB_DATA_PATH = "/opt/sbms/test/mongodb"
                MONGODB_PORT = "27001"
                DISCOVERY_PORT = "28761"
                EUREKA_INSTANCE_LIST = "http://sbms-discovery:$DISCOVERY_PORT/eureka/"
                
                NETWORK_NAME = "sbms-test-net"
                NETWORK_HOST = "$INFRA_MANAGER"
            }
            steps {
                // TODO: execute tests
                echo "insert tests here"
            }
            post {
                always {
                    sh "docker -H $APP_SWARM_MANAGER stack rm $APP_STACK_NAME"
                    sh "docker-compose -H $INFRA_MANAGER -f sbms-infrastructure.yml down"
                    sh "chmod +x ./remove-network.sh"
                    sh "./remove-network.sh"
                    sh "rm -rf $MONGODB_DATA_PATH/*"
                }
            }
        }
        stage ('Tag Tested Images') {
            environment {
                SOURCE_IMAGE_TAG = "test"
                IMAGE_TAG = "test-passed"
            }
            steps {
                withDockerRegistry([url: '', credentialsId: 'DOCKER_HUB_CREDENTIALS']) {
                    sh "docker tag jvandusen/sbms-discovery:$SOURCE_IMAGE_TAG jvandusen/sbms-discovery:$IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-admin:$SOURCE_IMAGE_TAG jvandusen/sbms-admin:$IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-web:$SOURCE_IMAGE_TAG jvandusen/sbms-web:$IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-greeting:$SOURCE_IMAGE_TAG jvandusen/sbms-greeting:$IMAGE_TAG"

                    sh "docker push jvandusen/sbms-discovery:$IMAGE_TAG"
                    sh "docker push jvandusen/sbms-admin:$IMAGE_TAG"
                    sh "docker push jvandusen/sbms-web:$IMAGE_TAG"
                    sh "docker push jvandusen/sbms-greeting:$IMAGE_TAG"
                }
            }
        }
        stage('Prepare UAT Infrastructure') {
            environment {
                INFRA_MANAGER = "$DEV_HOST:2375"
                COMPOSE_PROJECT_NAME = "sbms-uat-infra"
                IMAGE_TAG = "uat"
                
                MONGODB_DATA_PATH = "/opt/sbms/uat/mongodb"
                MONGODB_PORT = "27017"
                DISCOVERY_PORT = "8761"
                EUREKA_INSTANCE_LIST = "http://sbms-discovery:$DISCOVERY_PORT/eureka/"
                
                NETWORK_NAME = "sbms-uat-net"
                NETWORK_HOST = "$INFRA_MANAGER"
            }
            steps {
                sh "chmod +x ./create-network.sh"
                sh "./create-network.sh"
                sh "docker-compose -H $INFRA_MANAGER -f sbms-infrastructure.yml pull"
                sh "docker-compose -H $INFRA_MANAGER -f sbms-infrastructure.yml up -d"
            }
        }
        stage('Deploy to UAT') {
            environment {
                APP_SWARM_MANAGER = "$DEV_HOST:2375"
                APP_STACK_NAME = "sbms-uat-app"
                SOURCE_IMAGE_TAG = "test-passed"
                IMAGE_TAG = "uat"
                
                ADMIN_PORT = "9999"
                WEB_PORT = "8080"
                GREETING_PORT = "8100"
                DISCOVERY_PORT = "8761"
                
                EUREKA_INSTANCE_LIST = "http://sbms-discovery:$DISCOVERY_PORT/eureka/"
                MONGODB_HOST = "sbms-mongo"
                MONGODB_PORT = "27017"
                
                NETWORK_NAME = "sbms-uat-net"
            }
            steps {
                withDockerRegistry([url: '', credentialsId: 'DOCKER_HUB_CREDENTIALS']) {
                    sh "docker tag jvandusen/sbms-discovery:$SOURCE_IMAGE_TAG jvandusen/sbms-discovery:$IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-admin:$SOURCE_IMAGE_TAG jvandusen/sbms-admin:$IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-web:$SOURCE_IMAGE_TAG jvandusen/sbms-web:$IMAGE_TAG"
                    sh "docker tag jvandusen/sbms-greeting:$SOURCE_IMAGE_TAG jvandusen/sbms-greeting:$IMAGE_TAG"

                    sh "docker -H $APP_SWARM_MANAGER stack deploy --compose-file sbms-application.yml --resolve-image always --prune $APP_STACK_NAME"

                    sh "docker push jvandusen/sbms-discovery:$IMAGE_TAG"
                    sh "docker push jvandusen/sbms-admin:$IMAGE_TAG"
                    sh "docker push jvandusen/sbms-web:$IMAGE_TAG"
                    sh "docker push jvandusen/sbms-greeting:$IMAGE_TAG"
                }
            }
        }
    }
}
