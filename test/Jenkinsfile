@Library('sbms-pipeline-shared@master') _

pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds()
        timeout(time: 15, unit: 'MINUTES')
    }

    triggers {
        upstream(upstreamProjects: 'sbms-pipeline-dev', threshold: hudson.model.Result.SUCCESS)
    }

    environment {
        TEST_HOST = "172.24.140.88"
        TEST_PORT = "28080"
        DOCKER_HOST = "tcp://$TEST_HOST:2376"
        DOCKER_TLS_VERIFY = "1"
        DOCKER_CERT_PATH = "/root/.tls"

        READY_FOR_TESTING = "no"
    }

    stages {
        stage('Deploy to Test') {
            environment {
                STACK_NAME = "sbms-test-app"
                SOURCE_IMAGE_TAG = "dev"
                IMAGE_TAG = "test"

                ADMIN_PORT = "29999"
                WEB_PORT = "$TEST_PORT"
                GREETING_PORT = "28100"
                DISCOVERY_PORT = "28761"

                MONGODB_DATA_PATH = "/opt/sbms/test/mongodb"
                MONGODB_PORT = "27001"

                NETWORK_NAME = "sbms-test-net"
            }
            steps {
                withDockerRegistry([url: '', credentialsId: 'DOCKER_HUB_CREDENTIALS']) {
                    pull("$SOURCE_IMAGE_TAG")
                    tag("$SOURCE_IMAGE_TAG", "$IMAGE_TAG")
                    deploy("$STACK_NAME")
                    push("$IMAGE_TAG")
                }
            }
            post {
                failure {
                    notify('WARN', 'The *TEST* environment did not deploy properly and tests were not executed.')
                }
            }
        }
        stage('Wait For Environment') {
            when {
                expression {
                    // ping the application every 10 seconds for up to 3 minutes (18 pings)
                    return waitUntilActive("$TEST_HOST", "$TEST_PORT", 10, 30)
                }
            }
            steps {
                script {
                    READY_FOR_TESTING = "yes"
                }
            }
        }
        stage('Run Tests') {
            when {
                environment name: "READY_FOR_TESTING", value: "yes"
            }
            environment {
                STACK_NAME = "sbms-test-app"
                MONGODB_DATA_PATH = "/opt/sbms/test/mongodb"
            }
            steps {
                build('sbms-test')
            }
            post {
                always {
                    tearDown("$STACK_NAME")
                    sh "rm -rf $MONGODB_DATA_PATH/*"
                }
                success {
                    notify('INFO', 'All tests passed.')
                }
                failure {
                    notify('FAIL', 'There were test failures.')
                }
            }
        }
        stage ('Tag Tested Images') {
            when {
                environment name: "READY_FOR_TESTING", value: "yes"
            }
            environment {
                SOURCE_IMAGE_TAG = "test"
                IMAGE_TAG = "test-passed"
            }
            steps {
                withDockerRegistry([url: '', credentialsId: 'DOCKER_HUB_CREDENTIALS']) {
                    tag("$SOURCE_IMAGE_TAG", "$IMAGE_TAG")
                    push("$IMAGE_TAG")
                }
            }
            post {
                failure {
                    notify('WARN', 'Tests were completed, but images were not properly marked as test-passed.')
                }
            }
        }
        stage ('Summarize') {
            when {
                environment name: "READY_FOR_TESTING", value: "no"
            }
            steps {
                notify('WARN', 'Tests were skipped because the test environment was not ready in the allotted time.')
            }
        }
    }
}
